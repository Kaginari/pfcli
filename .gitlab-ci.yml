################################################ PHASE 1 ################################################
image: golang:1.15.5

variables:
  PROJECT_NAME: "pfcli"

################################################ PHASE 2 ################################################

cache:
  paths:
    - /go/src/github.com
    - /go/src/golang.org
    - /go/src/google.golang.org
    - /go/src/gopkg.in

stages:
  - test
  - quality
  - build
  - release
before_script:
  - which git || ( apt-get update -y && apt-get install git -y )
  ##
  ## Optionally, if you will be using any Git commands, set the user name and
  ## and email.
  ##
  - git config --global user.email "bouagina.montassar@gmail.com"
  - git config --global user.name "ITMonta"
  ## Prepare go sources
  - mkdir -p /go/src/github.com/Kaginari/pfcli /go/src/_/builds/nt-factory/2021/admin
  - cp -r $CI_PROJECT_DIR /go/src/github.com/Kaginari/pfcli
  - ln -s /go/src/github.com/Kaginari/pfcli /go/src/_/builds/nt-factory/2021/admin
  - go get -v -d ./...
################################################ PHASE 3 ################################################


unit_tests:
  stage: test
  script:
    - go test -coverprofile=coverage.out ./...
  artifacts:
    paths:
      - coverage.out
    expire_in: 1 day
sonar-analysis:
  stage: quality
  image: leppinger/golang-sonarqube-coverage:latest
  before_script:
    - echo "Performing sonar scan"
  script:
    - sonar-scanner -Dsonar.login=$SONAR_TOKEN
  needs:
    - job: unit_tests
      artifacts: true
build:
  stage: build
  script:
    - go build -i -v


release:
  stage: release
  image:
    name: goreleaser/goreleaser:latest
    entrypoint: [""]
  script:
    - git remote set-url origin https://ITMonta:$GITLAB_TOKEN@gitlab.com/$CI_PROJECT_PATH
    - ./release.sh -v patch
    - git stash
    - goreleaser release
  when: manual
  only:
    refs:
      - master